<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slide = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx = room_width / 4;
cy = room_height / 2 + 200;

bw = 800;
bh = 400;

bcx = cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw / 2
bcy = cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh / 2;



switch(slide){
    case 0:{
        draw_sprite(sprite33, -1, cx, cy);
    }break;
    case 1:{
        draw_sprite(sprite33, -1, cx, cy);
        draw_set_color(c_white);
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, false);    
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, false);
        draw_set_color(c_black);  
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, true); 
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, true);
        
        draw_sprite(sprite37, 0,  bcx, bcy);//cx + sprite_get_width(sprite33) / 2 + 60 - 20 + 200, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - 200 + 100);
    }break;
    case 2:{
        draw_sprite(sprite33, -1, cx, cy);
        draw_set_color(c_white);
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, false);    
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, false);
        draw_set_color(c_black);  
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, true); 
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, true);
        
        draw_sprite(sprite38, 0,  bcx - 200, bcy);
        draw_set_font(fnt_standard);
        draw_text(bcx, bcy, "=");
        draw_set_font(-1);
        draw_sprite(sprite36, 0,  bcx + 200, bcy); //cx + sprite_get_width(sprite33) / 2 + 60 - 20 + 200, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - 200 + 100);
    }break;
    case 3:{
        draw_sprite(sprite33, -1, cx, cy);
        draw_set_color(c_white);
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, false);    
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, false);
        draw_set_color(c_black);  
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, true); 
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, true);
        
        
        draw_sprite(sprite35, 0, bcx, bcy);
        draw_sprite(sprite34, 0, bcx - 250, bcy);
        draw_sprite(sprite32, 0, bcx + 250, bcy);
        draw_set_font(fnt_standard);
        draw_text(bcx - 125, bcy, "+");
        draw_text(bcx + 125, bcy, "+");
        draw_set_font(-1);
    }break;
    case 4:{
        draw_sprite(sprite33, -1, cx, cy);
        draw_set_color(c_white);
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, false);    
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, false);
        draw_set_color(c_black);  
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, true); 
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, true);
        
        
        draw_sprite(sprite38, 0, bcx, bcy);
        draw_set_font(fnt_standard);
        draw_text(bcx - 130, bcy, "=");
        draw_set_font(-1);
    }break;
    case 5:{
        draw_sprite(sprite33, -1, cx, cy);
        draw_set_color(c_white);
        draw_set_color(c_black);  
        draw_arrow(cx + 150, cy, cx + 300, cy, 20);
        draw_sprite(sprite34, 0, cx + 500, cy);
        
        draw_set_font(fnt_standard);
        draw_set_font(-1);
    }break;
    case 6:{
        draw_sprite(sprite31, -1, cx, cy);
        draw_set_color(c_white);
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, false);    
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, false);
        draw_set_color(c_black);  
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, true); 
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, true);
        
        draw_sprite(sprite37, 0,  bcx - 200, bcy);
        draw_set_font(fnt_standard);
        draw_text(bcx, bcy, "=");
        draw_set_font(-1);
        draw_sprite(sprite36, 0,  bcx + 200, bcy); //cx + sprite_get_width(sprite33) / 2 + 60 - 20 + 200, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - 200 + 100);
    }break;
    case 7:{
        draw_sprite(sprite31, -1, cx, cy);
        draw_set_color(c_white);
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, false);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, false);    
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, false);
        draw_set_color(c_black);  
        draw_circle(cx + sprite_get_width(sprite33) / 2 - 20        , cy - sprite_get_height(sprite33) / 2 - 20 + 10        , 10, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 30 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 30 + 10   , 12, true);
        draw_circle(cx + sprite_get_width(sprite33) / 2 + 60 - 20   , cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10   , 15, true); 
        draw_ellipse(cx + sprite_get_width(sprite33) / 2 + 60 - 20, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - bh, cx + sprite_get_width(sprite33) / 2 + 60 - 20 + bw, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10, true);
        
        draw_sprite(sprite38, 0,  bcx - 200, bcy);
        draw_set_font(fnt_standard);
        draw_text(bcx, bcy, "= D:");
        draw_set_font(-1);
        //draw_sprite(sprite36, 0,  bcx + 200, bcy); //cx + sprite_get_width(sprite33) / 2 + 60 - 20 + 200, cy - sprite_get_height(sprite33) / 2 - 20 - 60 + 10 - 200 + 100);
    }break;
    case 8:{
        draw_sprite(sprite31, -1, cx, cy);
        draw_set_color(c_white);
        draw_set_color(c_black);  
        draw_arrow(cx + 150, cy, cx + 300, cy, 20);
        draw_sprite(sprite33, 0, cx + 500, cy);
        
        draw_set_font(fnt_standard);
        draw_set_font(-1);
    }break;
}
if(keyboard_check_pressed(vk_anykey)){
    slide += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
</object>
