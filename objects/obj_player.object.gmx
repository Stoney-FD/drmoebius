<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_turn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ysp = 0;
grav = 1;
jsp = 17;
xsp = 7;

image_speed = 0;

is_debug = false;

if(!global.muted) sound_play(bgm_bgm);


bgr = 45;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_return) &amp;&amp; keyboard_check(vk_control)){
    if(room_exists(room_next(room))){
        room_goto_next();
    }
}
if(keyboard_check_pressed(vk_f1)){
    instance_create(view_xview[0], view_yview[0], obj_help);
}
else{
if(fps &gt; 0){
    bgr -= 1 / fps;
    if(bgr &lt; 0){ 
        bgr = 45;
        sound_loop(bgm_bgm);
    }
}
if(keyboard_check_pressed(ord('M'))){
    global.muted = !global.muted;
    
    if(global.muted){
        sound_stop(bgm_bgm);
    }
    else{
        sound_play(bgm_bgm);
        bgr = 45;
    }
}

if(visible){

if(!place_meeting(x, y + 1, obj_block) &amp;&amp; !place_meeting(x, y, obj_ladder) &amp;&amp; !(!place_meeting(x, y, obj_ladder) &amp;&amp; place_meeting(x, y + 1, obj_ladder))){
    ysp += grav;
}
else{
    ysp = 0;
}

if(keyboard_check_pressed(vk_up) &amp;&amp; (place_meeting(x, y + 1, obj_block) || (!place_meeting(x, y, obj_ladder) &amp;&amp; place_meeting(x, y + 1, obj_ladder)))){
    if(!place_meeting(x, y, obj_ladder)){
        ysp -= jsp;
    }
}

if(keyboard_check(vk_up)){
    if(place_meeting(x, y, obj_ladder)){
        sr_move_contact_object(0, -xsp, obj_block);
    }   
}
if(keyboard_check(vk_down)){
    if(place_meeting(x, y, obj_ladder) || place_meeting(x, y + 1, obj_ladder)){
        sr_move_contact_object(0, xsp, obj_block);
    }    
}

if(keyboard_check(vk_left)){
    ii = instance_place(x - xsp, y, obj_moveable_block);
    if(ii != noone &amp;&amp; place_meeting(x, y + 1, obj_block)){
        with(ii){
            if(!place_meeting(x - shift, y, obj_block) &amp;&amp; !place_meeting(x - shift, y, obj_spikes) &amp;&amp; !place_meeting(x - shift, y, obj_saw)){
                x -= shift;
            }
        }
    }    

    if(!place_meeting(x - xsp, y, obj_block)){
        x -= xsp;
    }
    else{    
        var i;
        for(i = 0; i &lt; abs(xsp); i += 1){
            if(!place_meeting(x - 1, y, obj_block)) x -= 1;
            else break;
        }
    }
}
else if(keyboard_check(vk_right)){
    ii = instance_place(x + xsp, y, obj_moveable_block);
    if(ii != noone &amp;&amp; place_meeting(x, y + 1, obj_block)){
        with(ii){
            if(!place_meeting(x + shift, y, obj_block) &amp;&amp; !place_meeting(x + shift, y, obj_spikes) &amp;&amp; !place_meeting(x + shift, y, obj_saw)){
                x += shift;
            }
        }
    }    
    
    if(!place_meeting(x + xsp, y, obj_block)){
        x += xsp;
    }
    else{
        var i;
        for(i = 0; i &lt; abs(xsp); i += 1){
            if(!place_meeting(x + 1, y, obj_block)) x += 1;
            else break;
        }
    }
}

if(!place_meeting(x, y + ysp, obj_block)){
    y += ysp;
}
else{
    var i;
    for(i = 0; i &lt; abs(ysp); i += 1){
        if(!place_meeting(x, y + sign(ysp), obj_block)) y += sign(ysp);
        else break;
    }
    if(ysp &gt; 25){
        //death case
        instance_create(x, y, obj_body);
        instance_create(x, y, obj_blood_creator);
        x = xstart;
        y = ystart;
        sound_play(sfx_fall);
        sound_play(sfx_ouch);
        //sr_reset(false);
        //x = xstart;
        //y = ystart;
    }
    ysp = 0;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//select sprite
if(keyboard_check(vk_left) &amp;&amp; !place_meeting(x, y, obj_ladder)){
    image_speed = 1;
    sprite_index = spr_player_walk;
    image_xscale = -1;
}
else if(keyboard_check(vk_right) &amp;&amp; !place_meeting(x, y, obj_ladder)){
    image_speed = 1;
    sprite_index = spr_player_walk;
    image_xscale = 1;
}
else if(place_meeting(x, y, obj_ladder)){
    image_speed = 0;
    sprite_index = spr_player_climb;
    image_xscale = 1;
    
    if(keyboard_check(vk_right) || keyboard_check(vk_left) || keyboard_check(vk_up) || keyboard_check(vk_down)){
        image_speed = 1;
    }
}
else{
    sprite_index = spr_player_turn;
    image_speed = 0;
    image_xscale = 1;
    image_index = 0;
}

/*
if(!keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)){
    sprite_index = spr_player_turn;
    image_xscale = 1;
}
else if(keyboard_check(vk_left)){
    sprite_index = spr_player_side;
    image_xscale = -1;
}
else if(keyboard_check(vk_right)){
    sprite_index = spr_player_side;
    image_xscale = 1;
}
*/
mask_index = spr_player_mask;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_moebius">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_outro);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_checkpoint">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_player_spawner.x = other.x;
obj_player_spawner.y = other.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mummy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
    instance_create(x, y, obj_blood_creator);
    visible = false;
    sound_play(sfx_mummy);
    sound_play(sfx_fall);
}

//sr_reset(false);
//x = obj_player_spawner.x;//xstart;
//y = obj_player_spawner.y;//ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_saw">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
    instance_create(x, y, obj_blood_creator);
    visible = false;
    sound_play(sfx_ouch);
}

//sr_reset(false);
//x = obj_player_spawner.x;//xstart;
//y = obj_player_spawner.y;//ystart;

sound_play(sfx_saw);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_diamond">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_play(sfx_mystic);
obj_timer.c_time += other.amount;
obj_timer.max_time += other.amount;

var xt, yt;
xt = other.x;
yt = other.y;

with(other) instance_destroy();

instance_create(xt, yt, obj_draw_glow);
//sr_reset(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_switch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!other.state){
    other.state = true;
    other.sprite_index = spr_switch_on;
    sound_play(sfx_switch);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spikes">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
    instance_create(x, y, obj_body);
    instance_create(x, y, obj_blood_creator);
    visible = false;
    sound_play(sfx_ouch);
}
//sr_reset(false);
//x = obj_player_spawner.x;//xstart;
//y = obj_player_spawner.y;//ystart;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stomp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
    instance_create(x, y, obj_blood_creator);
    visible = false;
    sound_play(sfx_ouch);
}
//sr_reset(false);
//x = obj_player_spawner.x;//xstart;
//y = obj_player_spawner.y;//ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_final_putt">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_falling_moveable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
    instance_create(x, y, obj_blood_creator);
    visible = false;
    sound_play(sfx_ouch);
}

//sr_reset(false);
//x = obj_player_spawner.x;//xstart;
//y = obj_player_spawner.y;//ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
</object>
